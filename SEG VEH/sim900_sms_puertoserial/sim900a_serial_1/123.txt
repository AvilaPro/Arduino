// Test code for Adafruit GPS modules using MTK3329/MTK3339 driver
//
// This code shows how to listen to the GPS module in an interrupt
// which allows the program to have more 'freedom' - just parse
// when a new NMEA sentence is available! Then access data when
// desired.
//
// Tested and works great with the Adafruit Ultimate GPS module
// using MTK33x9 chipset
//    ------> http://www.adafruit.com/products/746
// Pick one up today at the Adafruit electronics shop 
// and help support open source hardware & software! -ada

#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>
#include <GSM.h>
#define PINNUMBER ""
 GSM gsmAccess; // include a 'true' parameter for debug enabled
 GSM_SMS sms;
// If you're using a GPS module:
// Connect the GPS Power pin to 5V
// Connect the GPS Ground pin to ground
// If using software serial (sketch example default):
//   Connect the GPS TX (transmit) pin to Digital 3
//   Connect the GPS RX (receive) pin to Digital 2
// If using hardware serial (e.g. Arduino Mega):
//   Connect the GPS TX (transmit) pin to Arduino RX1, RX2 or RX3
//   Connect the GPS RX (receive) pin to matching TX1, TX2 or TX3

// If you're using the Adafruit GPS shield, change 
// SoftwareSerial mySerial(3, 2); -> SoftwareSerial mySerial(8, 7);
// and make sure the switch is set to SoftSerial

// If using software serial, keep this line enabled
// (you can change the pin numbers to match your wiring):
SoftwareSerial mySerial(3, 2);

// If using hardware serial (e.g. Arduino Mega), comment out the
// above SoftwareSerial line, and enable this line instead
// (you can change the Serial number to match your wiring):

//HardwareSerial mySerial = Serial1;


Adafruit_GPS GPS(&mySerial);


// Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
// Set to 'true' if you want to debug and listen to the raw GPS sentences. 
#define GPSECHO  false

// this keeps track of whether we're using the interrupt
// off by default!
boolean usingInterrupt = false;
void useInterrupt(boolean); // Func prototype keeps Arduino 0023 happy

// For Algorithm
const uint8_t polySides = 4; // 4 sides in your polygon

//                           A,            B,         C,        D
float polyX2[polySides] = { 25.270504, 25.270591, 25.2691, 25.2690 }; // X
float polyY2[polySides] = { 55.327600, 55.328995, 55.3291, 55.3276 }; // Y
float polyX1[polySides] = { 25.270196, 25.270230, 25.270161, 25.270149 }; // X
float polyY1[polySides] = { 55.328337, 55.328871, 55.328877, 55.328336 }; // Y
float polyX3[polySides] = { 25.270196, 25.270230, 25.270161, 25.270149 }; // X
float polyY3[polySides] = { 55.328337, 55.328871, 55.328877, 55.328336 }; // Y
float Roadspeeds[3]={40 , 50 ,70};
float Actualspeed;
bool k;
String txtMsg;
//----------------------------
// initialize the library instance


// char array of the telephone number to send SMS
// change the number 1-212-555-1212 to a number
// you have access to
char remoteNumber[20]= "111111"; 

void setup()  
{
    
  // connect at 115200 so we can read the GPS fast enough and echo without dropping chars
  // also spit it out
  Serial.begin(9600);
  Serial.println("Adafruit GPS library basic test!");

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
  
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);

  // the nice thing about this code is you can have a timer0 interrupt go off
  // every 1 millisecond, and read data from the GPS for you. that makes the
  // loop code a heck of a lot easier!
  useInterrupt(true);

  delay(1000);
  // Ask for firmware version
  mySerial.println(PMTK_Q_RELEASE);
   // connection state
   boolean notConnected = true;

   // Start GSM shield
   // If your SIM has PIN, pass it as a parameter of begin() in quotes
   while(notConnected)
   {
     if(gsmAccess.begin(PINNUMBER)==GSM_READY)
       notConnected = false;
     else
     {
       Serial.println("Not connected");
       delay(1000);
     }
   }
   Serial.println("GSM initialized");
   

}

// Interrupt is called once a millisecond, looks for any new GPS data, and stores it
SIGNAL(TIMER0_COMPA_vect) {
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
#ifdef UDR0
  if (GPSECHO)
    if (c) UDR0 = c;  
    // writing direct to UDR0 is much much faster than Serial.print 
    // but only one character can be written at a time. 
#endif
}

void useInterrupt(boolean v) {
  if (v) {
    // Timer0 is already used for millis() - we'll just interrupt somewhere
    // in the middle and call the "Compare A" function above
    OCR0A = 0xAF;
    TIMSK0 |= _BV(OCIE0A);
    usingInterrupt = true;
  } else {
    // do not call the interrupt function COMPA anymore
    TIMSK0 &= ~_BV(OCIE0A);
    usingInterrupt = false;
  }
}

uint32_t timer = millis();
void loop()                     // run over and over again
{
  // in case you are not using the interrupt above, you'll
  // need to 'hand query' the GPS, not suggested :(
  if (! usingInterrupt) {
    // read data from the GPS in the 'main loop'
    char c = GPS.read();
    // if you want to debug, this is a good time to do it!
    if (GPSECHO)
      if (c) Serial.print(c);
  }
  
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences! 
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    //Serial.println(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false
  
    if (!GPS.parse(GPS.lastNMEA()))   // this also sets the newNMEAreceived() flag to false
      return;  // we can fail to parse a sentence in which case we should just wait for another
  }

  // if millis() or timer wraps around, we'll just reset it
  if (timer > millis())  timer = millis();

  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) { 
    timer = millis(); // reset the timer
    
    if (GPS.fix) {
     
       // start checking
       for (int i=1;i<=10;i++) {
        Serial.print(GPS.latitudeDegrees,6);
        Serial.println(GPS.longitudeDegrees,6);
    switch (i){
    case 1:
  k = pointInPolygon1(GPS.latitudeDegrees, GPS.longitudeDegrees);
 
  break;
  case 2:
  k = pointInPolygon2(GPS.latitudeDegrees, GPS.longitudeDegrees);
  
  break;
  case 3:
  k = pointInPolygon3(GPS.latitudeDegrees, GPS.longitudeDegrees);
 
  break;
     }
  if (k==1){
int Roadnumber=i;
Serial.println(Roadnumber);
Serial.println(Roadspeeds[Roadnumber-1]);
if (Roadspeeds[Roadnumber-1]<GPS.speed*1.852)
{
txtMsg = String (GPS.latitudeDegrees,6);
String stringtwo = String (GPS.longitudeDegrees,6);
String stringthree = String (GPS.speed*1.852,6);
sendSMS();
  
  }

break;
   }
   
    }
  }
}
}

//Algorithm
bool pointInPolygon1( float x, float y )
{
  
  int i, j = polySides - 1;
  bool oddNodes = false;

  for ( i = 0; i < polySides; i++ )
  {
    if ( (polyY1[i] < y && polyY1[j] >= y || polyY1[j] < y && polyY1[i] >= y) &&  (polyX1[i] <= x || polyX1[j] <= x) )
    {
      oddNodes ^= ( polyX1[i] + (y - polyY1[i]) / (polyY1[j] - polyY1[i]) * (polyX1[j] - polyX1[i]) < x );
    }

    j = i;
  }

  return oddNodes;
}
bool pointInPolygon2( float x, float y )
{
  
  int i, j = polySides - 1;
  bool oddNodes = false;

  for ( i = 0; i < polySides; i++ )
  {
    if ( (polyY2[i] < y && polyY2[j] >= y || polyY2[j] < y && polyY2[i] >= y) &&  (polyX2[i] <= x || polyX2[j] <= x) )
    {
      oddNodes ^= ( polyX2[i] + (y - polyY2[i]) / (polyY2[j] - polyY2[i]) * (polyX2[j] - polyX2[i]) < x );
    }

    j = i;
  }

  return oddNodes;
}
bool pointInPolygon3( float x, float y )
{
  
  int i, j = polySides - 1;
  bool oddNodes = false;

  for ( i = 0; i < polySides; i++ )
  {
    if ( (polyY3[i] < y && polyY3[j] >= y || polyY3[j] < y && polyY3[i] >= y) &&  (polyX3[i] <= x || polyX3[j] <= x) )
    {
      oddNodes ^= ( polyX3[i] + (y - polyY3[i]) / (polyY3[j] - polyY3[i]) * (polyX3[j] - polyX3[i]) < x );
    }

    j = i;
  }

  return oddNodes;
}
void sendSMS(){

   Serial.print("Message to mobile number: ");
   Serial.println(remoteNumber);

   // sms text
   Serial.println("SENDING");
   Serial.println();
   Serial.println("Message:");
   Serial.println(txtMsg);

   // send the message
   sms.beginSMS(remoteNumber);
   sms.print(txtMsg);
   sms.endSMS(); 
   Serial.println("\nCOMPLETE!\n");  
}
  